# -*- coding: utf-8 -*-
"""Prediction_of_Disease_Outbreaks(Diabetes).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LfVgSkAxhANW5JuVtwJh61KIjuw0GrxM
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score,classification_report, confusion_matrix
from mlxtend.plotting import plot_decision_regions

from google.colab import files
files.upload()

data=pd.read_csv('diabetes.csv')

data

type(data)

data.head()

data.tail()

data.shape

data.describe()

data.isnull().sum()

"""Data Preprocessing"""

data['Outcome'].value_counts

data.groupby('Outcome').mean()

x=data.drop(columns='Outcome',axis=1)
y=data['Outcome']

print(x)

print(y)

"""Data Standardization"""

model=StandardScaler()

model.fit(x)

standardized_data=model.transform(x)

x=standardized_data
y=data['Outcome']

print(x)

print(y)

"""Train and test split"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

classifier=svm.SVC(kernel='linear')

"""training the svm"""

classifier.fit(x_train,y_train)

"""accuracy on training data"""

x_train_prediction=classifier.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('accuracy on training data:',training_data_accuracy)

x_test_prediction=classifier.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('accuracy on test data:',test_data_accuracy)

input_data=(5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=classifier.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==1):
  print('The person is not diabetic')
else:
  print('The person is diabetic')